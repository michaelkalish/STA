package au.edu.adelaide.fxmr.model;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.Random;

import org.junit.Test;

import au.edu.adelaide.fxmr.data.GeneralModel;
import cern.colt.matrix.DoubleFactory2D;
import cern.colt.matrix.DoubleMatrix2D;
import cern.colt.matrix.impl.DenseDoubleMatrix1D;
import cern.colt.matrix.impl.DenseDoubleMatrix2D;

public class FitsTests {
	private DoubleMatrix2D model1 = new DenseDoubleMatrix2D(new double[][] { { 1 }, { 0 }, { 1 }, { 0 } });
	private DoubleMatrix2D model6 = new DenseDoubleMatrix2D(
			new double[][] { { 0, 1 }, { 0, -1 }, { 1, 1 }, { 1, -1 } });
	private DoubleMatrix2D model4 = new DenseDoubleMatrix2D(
			new double[][] { { 1, 0 }, { -1, 0 }, { 0, 1 }, { 0, -1 } });
	private DoubleMatrix2D model5 = new DenseDoubleMatrix2D(new double[][] { { 0, 1 }, { 0, 0 }, { 1, 1 }, { 1, 0 } });
	private DoubleMatrix2D model9 = new DenseDoubleMatrix2D(new double[][] { { 1, 1 }, { 1, 0 }, { 1, 1 }, { 1, 0 } });
	private DoubleMatrix2D model8 = new DenseDoubleMatrix2D(
			new double[][] { { 0, 1, 0 }, { 0, -1, 0 }, { 1, 0, 1 }, { 1, 0, -1 } });

	private double[][] getMeansSK1() {
		return new double[][] {
				{ 99.2, 99.8, 99.4, 99.6, 92.7, 99.2, 97.3, 91.4, 76.9, 79.2, 70.5, 53.2, 74.2, 57.6, 83.6, 66.4 },
				{ 58.7, 62.7, 52, 49.8, 74.1, 64.6, 64.7, 65.3, 77, 69.4, 79.5, 83.1, 99.6, 84.3, 89.6, 75.1 },
				{ 94.2, 99.3, 95.5, 92.9, 61.7, 49.8, 86.4, 55.6, 93.9, 99.4, 93.8, 83.1, 67.3, 80.2, 82.3, 63.7 },
				{ 65.6, 48.6, 71.9, 62.4, 88.9, 99, 78, 89.8, 80.4, 87.7, 80.6, 74.9, 95.7, 96.4, 82.7, 76.6 } };
	}

	private DoubleMatrix2D[] getWeightsSK1() {
		DoubleMatrix2D[] weights = new DoubleMatrix2D[4];
		weights[0] = DoubleFactory2D.dense.diagonal(
				new DenseDoubleMatrix1D(new double[] { 250, 250, 160, 160, 0.0990074503106359, 250, 0.657462195923734,
						0.0881659282770173, 0.0237953599048186, 0.0334124093688396, 0.0243865264441396,
						0.015439186972414, 0.0221453287197232, 0.016, 0.0362897372623022, 0.0196655866981972 }));
		weights[1] = DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(new double[] { 0.0167965600644988,
				0.017146114904689, 0.0239118608807934, 0.0160641925132831, 0.0221453287197232, 0.0180309320639557,
				0.0179546107440391, 0.0198411714227608, 0.0240292195309496, 0.0174336757597814, 0.0330294622803541,
				0.0322830578512397, 160, 0.0354308390022676, 0.0403124212648022, 0.025 }));
		weights[2] = DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(new double[] { 0.425124880433627, 62.5,
				2.26757369614512, 0.324648973297622, 0.0424407686023194, 0.0277008310249307, 0.182615047479912,
				0.0418931515170557, 1.07497984412792, 160, 0.324648973297622, 0.0485619589894256, 0.0356426821118289,
				0.0811622433244055, 0.177777777777778, 0.0776261910768693 }));
		weights[3] = DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(new double[] { 0.0469131169074873,
				0.027411529289219, 0.0532793435984869, 0.0660982219578293, 0.730460189919649, 81.6326530612245,
				0.13840830449827, 0.170874449997864, 0.114387028510967, 0.115620302925194, 0.0528925619834711,
				0.0655640971004278, 2.16333153055706, 1.18906064209275, 0.145158949049209, 0.0660982219578293 }));
		return weights;
	}

	@Test
	public void fitsTest() {
		CMRxFitsProblem problem = new CMRxFitsProblem(getMeansSK1(), getWeightsSK1(), null, model1, getNSK1(),
				getCovSK1());

		new CMRxFits(20, problem, -1, 0);

		// 2.5s 2.46s 2.624s

		// System.out.println(fit.getP());
		//
		// for (double f : fit.getFits())
		// System.out.println(f);
	}

	@Test
	public void fitApproxTest() {
		CMRxFitsProblem problem = new CMRxFitsProblem(getMeansSK1(), getWeightsSK1(), null, model1, getNSK1(),
				getCovSK1());

		long start1 = System.nanoTime();
		new CMRxFits(20, problem, -1, 0, false, false, 0, 0, false);
		long end1 = System.nanoTime();

		long start2 = System.nanoTime();
		new CMRxFits(20, problem, -1, 0, false, false, 0, 0, true);
		long end2 = System.nanoTime();

		assertTrue(end1 - start1 > end2 - start2);
	}

	@Test
	public void fitSeedTest() {
		CMRxFitsProblem problem = new CMRxFitsProblem(getMeansSK1(), getWeightsSK1(), null, model8, getNSK1(),
				getCovSK1());

		CMRxFits fit = new CMRxFits(4, problem, -1, 0, false, false, 0, 0, false, false, 123, true);
		assertEquals(0.25, fit.getP(), 1e-4);
	}

	@Test
	public void fitsModel5GMTest() {
		CMRxFitsGMProblemMaker maker = new CMRxFitsGMProblemMaker();
		maker.addCell(1, 1,
				new double[][] { { 0.4, 0.54, 0.44 }, { 0.51, 0.46, 0.51 }, { 0.44, 0.54, 0.49 }, { 0.65, 0.5, 0.58 },
						{ 0.6800000000000001, 0.8, 0.79 }, { 0.58, 0.61, 0.5 }, { 0.5, 0.54, 0.49 },
						{ 0.53, 0.59, 0.54 }, { 0.73, 0.61, 0.39 }, { 0.65, 0.76, 0.7 }, { 0.64, 0.63, 0.75 },
						{ 0.5600000000000001, 0.84, 0.86 }, { 0.64, 0.74, 0.69 }, { 0.49, 0.44, 0.44 },
						{ 0.51, 0.4, 0.58 }, { 0.7, 0.73, 0.71 }, { 0.74, 0.73, 0.63 }, { 0.59, 0.54, 0.63 },
						{ 0.5600000000000001, 0.64, 0.55 }, { 0.69, 0.71, 0.6800000000000001 }, { 0.39, 0.39, 0.54 },
						{ 0.46, 0.44, 0.59 }, { 0.53, 0.45, 0.54 }, { 0.53, 0.65, 0.63 },
						{ 0.66, 0.6800000000000001, 0.74 }, { 0.6800000000000001, 0.85, 0.84 }, { 0.75, 0.8, 0.88 },
						{ 0.6800000000000001, 0.8100000000000001, 0.78 }, { 0.69, 0.76, 0.73 }, { 0.55, 0.55, 0.51 },
						{ 0.46, 0.5, 0.44 }, { 0.71, 0.71, 0.75 }, { 0.64, 0.53, 0.6 }, { 0.69, 0.83, 0.8 },
						{ 0.61, 0.59, 0.66 }, { 0.58, 0.65, 0.7 }, { 0.55, 0.66, 0.74 }, { 0.69, 0.73, 0.71 },
						{ 0.65, 0.64, 0.73 }, { 0.53, 0.41, 0.48 } });

		maker.addCell(2, 1,
				new double[][] { { 0.6800000000000001, 0.78, 0.8100000000000001 }, { 0.55, 0.54, 0.79 },
						{ 0.48, 0.4, 0.43 }, { 0.78, 0.6800000000000001, 0.78 }, { 0.58, 0.78, 0.8100000000000001 },
						{ 0.5, 0.5, 0.5 }, { 0.5600000000000001, 0.44, 0.43 },
						{ 0.51, 0.5600000000000001, 0.5600000000000001 }, { 0.54, 0.58, 0.43 }, { 0.63, 0.53, 0.58 },
						{ 0.79, 0.7, 0.9300000000000001 }, { 0.63, 0.6800000000000001, 0.8100000000000001 },
						{ 0.65, 0.7, 0.78 }, { 0.43, 0.58, 0.48 }, { 0.63, 0.45, 0.58 }, { 0.69, 0.76, 0.51 },
						{ 0.69, 0.74, 0.78 }, { 0.49, 0.53, 0.51 }, { 0.66, 0.64, 0.58 }, { 0.48, 0.53, 0.49 },
						{ 0.41, 0.46, 0.41 }, { 0.66, 0.44, 0.54 }, { 0.46, 0.64, 0.6 },
						{ 0.5600000000000001, 0.46, 0.51 }, { 0.79, 0.74, 0.7 },
						{ 0.8100000000000001, 0.8100000000000001, 0.78 }, { 0.74, 0.75, 0.71 },
						{ 0.75, 0.8100000000000001, 0.8100000000000001 }, { 0.74, 0.69, 0.69 }, { 0.54, 0.53, 0.51 },
						{ 0.45, 0.5, 0.43 }, { 0.48, 0.55, 0.51 }, { 0.74, 0.79, 0.69 }, { 0.51, 0.53, 0.53 },
						{ 0.76, 0.9300000000000001, 0.85 }, { 0.43, 0.54, 0.46 }, { 0.49, 0.61, 0.54 },
						{ 0.51, 0.75, 0.8100000000000001 }, { 0.6, 0.79, 0.79 }, { 0.51, 0.45, 0.53 } });

		maker.addCell(1, 2,
				new double[][] { { 0.7, 0.63, 0.74 }, { 0.46, 0.54, 0.5 }, { 0.45, 0.54, 0.48 },
						{ 0.6800000000000001, 0.7, 0.74 }, { 0.73, 0.74, 0.69 }, { 0.63, 0.6800000000000001, 0.7 },
						{ 0.5600000000000001, 0.69, 0.74 }, { 0.41, 0.5, 0.55 }, { 0.66, 0.65, 0.6 },
						{ 0.55, 0.63, 0.55 }, { 0.59, 0.78, 0.88 }, { 0.6800000000000001, 0.76, 0.69 },
						{ 0.53, 0.71, 0.69 }, { 0.7, 0.78, 0.8 }, { 0.5600000000000001, 0.51, 0.55 },
						{ 0.6800000000000001, 0.76, 0.76 }, { 0.69, 0.69, 0.78 }, { 0.75, 0.8100000000000001, 0.85 },
						{ 0.49, 0.4, 0.6 }, { 0.65, 0.6800000000000001, 0.8100000000000001 }, { 0.6, 0.48, 0.5 },
						{ 0.5, 0.6, 0.53 }, { 0.51, 0.65, 0.55 }, { 0.38, 0.45, 0.5600000000000001 },
						{ 0.59, 0.63, 0.63 }, { 0.58, 0.71, 0.66 }, { 0.6, 0.53, 0.48 }, { 0.61, 0.64, 0.69 },
						{ 0.69, 0.7, 0.74 }, { 0.73, 0.71, 0.73 }, { 0.71, 0.78, 0.89 },
						{ 0.6800000000000001, 0.73, 0.78 }, { 0.59, 0.46, 0.48 }, { 0.6, 0.45, 0.54 },
						{ 0.55, 0.61, 0.63 }, { 0.64, 0.71, 0.59 }, { 0.4, 0.64, 0.46 },
						{ 0.63, 0.6800000000000001, 0.61 }, { 0.49, 0.63, 0.65 }, { 0.65, 0.65, 0.69 } });

		maker.addCell(2, 2,
				new double[][] { { 0.51, 0.54, 0.51 }, { 0.51, 0.59, 0.5 }, { 0.5600000000000001, 0.5, 0.43 },
						{ 0.64, 0.54, 0.64 }, { 0.55, 0.49, 0.51 }, { 0.55, 0.71, 0.71 }, { 0.49, 0.58, 0.46 },
						{ 0.53, 0.55, 0.46 }, { 0.53, 0.49, 0.48 }, { 0.5, 0.48, 0.78 }, { 0.6, 0.83, 0.75 },
						{ 0.61, 0.8, 0.8100000000000001 }, { 0.6, 0.5600000000000001, 0.63 }, { 0.53, 0.51, 0.75 },
						{ 0.45, 0.5600000000000001, 0.64 }, { 0.51, 0.53, 0.46 }, { 0.45, 0.53, 0.7 },
						{ 0.8, 0.8100000000000001, 0.8 }, { 0.55, 0.6, 0.59 }, { 0.54, 0.6800000000000001, 0.48 },
						{ 0.54, 0.44, 0.48 }, { 0.45, 0.49, 0.51 }, { 0.66, 0.5600000000000001, 0.65 },
						{ 0.46, 0.45, 0.49 }, { 0.45, 0.4, 0.49 }, { 0.76, 0.78, 0.8 },
						{ 0.63, 0.65, 0.8100000000000001 }, { 0.51, 0.69, 0.78 }, { 0.63, 0.85, 0.83 },
						{ 0.73, 0.83, 0.75 }, { 0.51, 0.45, 0.5600000000000001 }, { 0.63, 0.8, 0.69 },
						{ 0.46, 0.5600000000000001, 0.45 }, { 0.86, 0.9300000000000001, 0.89 },
						{ 0.5600000000000001, 0.5600000000000001, 0.78 }, { 0.48, 0.64, 0.6 }, { 0.45, 0.53, 0.49 },
						{ 0.49, 0.53, 0.53 }, { 0.66, 0.75, 0.69 }, { 0.73, 0.7, 0.76 } });
		maker.addCell(1, 3,
				new double[][] { { 0.4, 0.54, 0.44 }, { 0.51, 0.46, 0.51 }, { 0.44, 0.54, 0.49 }, { 0.65, 0.5, 0.58 },
						{ 0.6800000000000001, 0.8, 0.79 }, { 0.58, 0.61, 0.5 }, { 0.5, 0.54, 0.49 },
						{ 0.53, 0.59, 0.54 }, { 0.73, 0.61, 0.39 }, { 0.65, 0.76, 0.7 }, { 0.64, 0.63, 0.75 },
						{ 0.5600000000000001, 0.84, 0.86 }, { 0.64, 0.74, 0.69 }, { 0.49, 0.44, 0.44 },
						{ 0.51, 0.4, 0.58 }, { 0.7, 0.73, 0.71 }, { 0.74, 0.73, 0.63 }, { 0.59, 0.54, 0.63 },
						{ 0.5600000000000001, 0.64, 0.55 }, { 0.69, 0.71, 0.6800000000000001 }, { 0.39, 0.39, 0.54 },
						{ 0.46, 0.44, 0.59 }, { 0.53, 0.45, 0.54 }, { 0.53, 0.65, 0.63 },
						{ 0.66, 0.6800000000000001, 0.74 }, { 0.6800000000000001, 0.85, 0.84 }, { 0.75, 0.8, 0.88 },
						{ 0.6800000000000001, 0.8100000000000001, 0.78 }, { 0.69, 0.76, 0.73 }, { 0.55, 0.55, 0.51 },
						{ 0.46, 0.5, 0.44 }, { 0.71, 0.71, 0.75 }, { 0.64, 0.53, 0.6 }, { 0.69, 0.83, 0.8 },
						{ 0.61, 0.59, 0.66 }, { 0.58, 0.65, 0.7 }, { 0.55, 0.66, 0.74 }, { 0.69, 0.73, 0.71 },
						{ 0.65, 0.64, 0.73 }, { 0.53, 0.41, 0.48 } });

		maker.addCell(2, 3,
				new double[][] { { 0.6800000000000001, 0.78, 0.8100000000000001 }, { 0.55, 0.54, 0.79 },
						{ 0.48, 0.4, 0.43 }, { 0.78, 0.6800000000000001, 0.78 }, { 0.58, 0.78, 0.8100000000000001 },
						{ 0.5, 0.5, 0.5 }, { 0.5600000000000001, 0.44, 0.43 },
						{ 0.51, 0.5600000000000001, 0.5600000000000001 }, { 0.54, 0.58, 0.43 }, { 0.63, 0.53, 0.58 },
						{ 0.79, 0.7, 0.9300000000000001 }, { 0.63, 0.6800000000000001, 0.8100000000000001 },
						{ 0.65, 0.7, 0.78 }, { 0.43, 0.58, 0.48 }, { 0.63, 0.45, 0.58 }, { 0.69, 0.76, 0.51 },
						{ 0.69, 0.74, 0.78 }, { 0.49, 0.53, 0.51 }, { 0.66, 0.64, 0.58 }, { 0.48, 0.53, 0.49 },
						{ 0.41, 0.46, 0.41 }, { 0.66, 0.44, 0.54 }, { 0.46, 0.64, 0.6 },
						{ 0.5600000000000001, 0.46, 0.51 }, { 0.79, 0.74, 0.7 },
						{ 0.8100000000000001, 0.8100000000000001, 0.78 }, { 0.74, 0.75, 0.71 },
						{ 0.75, 0.8100000000000001, 0.8100000000000001 }, { 0.74, 0.69, 0.69 }, { 0.54, 0.53, 0.51 },
						{ 0.45, 0.5, 0.43 }, { 0.48, 0.55, 0.51 }, { 0.74, 0.79, 0.69 }, { 0.51, 0.53, 0.53 },
						{ 0.76, 0.9300000000000001, 0.85 }, { 0.43, 0.54, 0.46 }, { 0.49, 0.61, 0.54 },
						{ 0.51, 0.75, 0.8100000000000001 }, { 0.6, 0.79, 0.79 }, { 0.51, 0.45, 0.53 } });

		maker.addCell(1, 4,
				new double[][] { { 0.7, 0.63, 0.74 }, { 0.46, 0.54, 0.5 }, { 0.45, 0.54, 0.48 },
						{ 0.6800000000000001, 0.7, 0.74 }, { 0.73, 0.74, 0.69 }, { 0.63, 0.6800000000000001, 0.7 },
						{ 0.5600000000000001, 0.69, 0.74 }, { 0.41, 0.5, 0.55 }, { 0.66, 0.65, 0.6 },
						{ 0.55, 0.63, 0.55 }, { 0.59, 0.78, 0.88 }, { 0.6800000000000001, 0.76, 0.69 },
						{ 0.53, 0.71, 0.69 }, { 0.7, 0.78, 0.8 }, { 0.5600000000000001, 0.51, 0.55 },
						{ 0.6800000000000001, 0.76, 0.76 }, { 0.69, 0.69, 0.78 }, { 0.75, 0.8100000000000001, 0.85 },
						{ 0.49, 0.4, 0.6 }, { 0.65, 0.6800000000000001, 0.8100000000000001 }, { 0.6, 0.48, 0.5 },
						{ 0.5, 0.6, 0.53 }, { 0.51, 0.65, 0.55 }, { 0.38, 0.45, 0.5600000000000001 },
						{ 0.59, 0.63, 0.63 }, { 0.58, 0.71, 0.66 }, { 0.6, 0.53, 0.48 }, { 0.61, 0.64, 0.69 },
						{ 0.69, 0.7, 0.74 }, { 0.73, 0.71, 0.73 }, { 0.71, 0.78, 0.89 },
						{ 0.6800000000000001, 0.73, 0.78 }, { 0.59, 0.46, 0.48 }, { 0.6, 0.45, 0.54 },
						{ 0.55, 0.61, 0.63 }, { 0.64, 0.71, 0.59 }, { 0.4, 0.64, 0.46 },
						{ 0.63, 0.6800000000000001, 0.61 }, { 0.49, 0.63, 0.65 }, { 0.65, 0.65, 0.69 } });

		maker.addCell(2, 4,
				new double[][] { { 0.51, 0.54, 0.51 }, { 0.51, 0.59, 0.5 }, { 0.5600000000000001, 0.5, 0.43 },
						{ 0.64, 0.54, 0.64 }, { 0.55, 0.49, 0.51 }, { 0.55, 0.71, 0.71 }, { 0.49, 0.58, 0.46 },
						{ 0.53, 0.55, 0.46 }, { 0.53, 0.49, 0.48 }, { 0.5, 0.48, 0.78 }, { 0.6, 0.83, 0.75 },
						{ 0.61, 0.8, 0.8100000000000001 }, { 0.6, 0.5600000000000001, 0.63 }, { 0.53, 0.51, 0.75 },
						{ 0.45, 0.5600000000000001, 0.64 }, { 0.51, 0.53, 0.46 }, { 0.45, 0.53, 0.7 },
						{ 0.8, 0.8100000000000001, 0.8 }, { 0.55, 0.6, 0.59 }, { 0.54, 0.6800000000000001, 0.48 },
						{ 0.54, 0.44, 0.48 }, { 0.45, 0.49, 0.51 }, { 0.66, 0.5600000000000001, 0.65 },
						{ 0.46, 0.45, 0.49 }, { 0.45, 0.4, 0.49 }, { 0.76, 0.78, 0.8 },
						{ 0.63, 0.65, 0.8100000000000001 }, { 0.51, 0.69, 0.78 }, { 0.63, 0.85, 0.83 },
						{ 0.73, 0.83, 0.75 }, { 0.51, 0.45, 0.5600000000000001 }, { 0.63, 0.8, 0.69 },
						{ 0.46, 0.5600000000000001, 0.45 }, { 0.86, 0.9300000000000001, 0.89 },
						{ 0.5600000000000001, 0.5600000000000001, 0.78 }, { 0.48, 0.64, 0.6 }, { 0.45, 0.53, 0.49 },
						{ 0.49, 0.53, 0.53 }, { 0.66, 0.75, 0.69 }, { 0.73, 0.7, 0.76 } });

		maker.setModel(model5.toArray());
		Fits fit = maker.solve(10, -1);
	}

	@Test
	public void generalModelMakerFitsTest() {
		CMRxFitsGMProblemMaker maker = new CMRxFitsGMProblemMaker();

		Random rand = new Random(2345235);
		for (int i = 0; i < 1000; i++) {
			int between = rand.nextInt(2);
			int n = between == 0 ? 3 : 4;

			double[][] cond = new double[1][n];
			for (int c = 0; c < n; c++)
				cond[0][c] = rand.nextDouble() + c * rand.nextGaussian();

			maker.addCell(between, rand.nextInt(4), cond);
		}

		assertEquals(1000, maker.getGm().getData().size());

		DoubleMatrix2D model = new DenseDoubleMatrix2D(4, 1);
		model.assign(1);
		maker.setModel(model.toArray());

		Fits fit = maker.solve(10, -1);

		assertTrue(fit.getDataFit() > 0);
		// NOTE: This can sometimes fail - should be extremely unlikely
		assertTrue(fit.getP() < 1);
	}

	@Test
	public void problemOfRachelTest() {
		CMRxFitsGMProblemMaker maker = new CMRxFitsGMProblemMaker();

		int nVar = 4;

		maker.addCell(1, 1,
				new double[][] { { 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 0, 1, 1, 1, 1, 1, 0.6666666666666666 },
						{ 1, 1, 1, 1, 0.6666666666666666, 1, 1, 0, 1, 0, 1, 0 }, { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 1, 0.6666666666666666, 1, 1, 1, 1, 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 0.3333333333333333 },
						{ 0.3333333333333333, 0.3333333333333333, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 0.6666666666666666, 0.3333333333333333, 1, 1, 1, 1, 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 0 }, {
								0.6666666666666666, 0, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1 },
						{ 1, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 1, 1, 1,
								1, 1 },
						{ 1, 0, 0.6666666666666666, 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 0, 0.3333333333333333,
								0.3333333333333333, 0.6666666666666666, 0, 0.3333333333333333 },
						{ 0.6666666666666666, 1, 0.6666666666666666, 1, 1, 1, 1, 0, 1, 0, 1, 0 },
						{ 1, 1, 1, 1, 1, 1, 1, 0.6666666666666666, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 0.6666666666666666, 1, 1, 1, 1 },
						{ 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 1, 0.6666666666666666, 0.6666666666666666,
								0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 1, 1 },
						{ 1, 0.6666666666666666, 1, 0, 1, 0.6666666666666666, 1, 1, 1, 1, 1, 1 },
						{ 0.3333333333333333, 0.6666666666666666, 1, 1, 1, 0.6666666666666666, 1, 0.6666666666666666, 1, 1, 1, 1 },
						{ 0.6666666666666666, 1, 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 0.6666666666666666, 0, 0,
								0.6666666666666666, 0, 0.6666666666666666, 0 },
						{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 0, 0.3333333333333333, 0.3333333333333333, 1, 0.6666666666666666, 0, 1, 1, 1, 1, 1, 1 },
						{ 0, 0.3333333333333333, 0.6666666666666666, 0, 1, 0.6666666666666666, 0.3333333333333333, 0, 0.3333333333333333,
								0.3333333333333333, 1, 1 },
						{ 0.6666666666666666, 1, 1, 0.6666666666666666, 1, 0.6666666666666666, 1, 0.6666666666666666, 1, 0, 1,
								0.3333333333333333 },
						{ 0, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 0.3333333333333333, 0,
								0.6666666666666666, 0.3333333333333333, 0.6666666666666666, 1 },
						{ 1, 0.6666666666666666, 1, 0.3333333333333333, 0.6666666666666666, 1, 1, 1, 1, 1, 1, 1 },
						{ 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 0.6666666666666666, 1, 0.6666666666666666, 1, 1, 1, 0 },
						{ 0, 0, 0.3333333333333333, 0.3333333333333333, 1, 0, 0.3333333333333333, 0, 1, 0.6666666666666666,
								0.6666666666666666,
								0.6666666666666666 },
						{ 0.3333333333333333, 0, 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 1, 1, 0.6666666666666666, 1, 1 },
						{ 0.6666666666666666, 0.3333333333333333, 1, 0.3333333333333333, 1, 0, 1, 1, 1, 1, 1, 1 },
						{ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 1, 0, 1, 0, 1, 0.3333333333333333, 1, 0, 1, 0.3333333333333333, 1, 0.3333333333333333 },
						{ 0.3333333333333333, 0, 1, 0, 1, 0.3333333333333333, 1, 0, 1, 0, 1, 0 },
						{ 0, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 1, 1, 1, 0.6666666666666666, 1, 1, 1, 1 },
						{ 1, 0.3333333333333333, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 0.6666666666666666, 1, 1, 1, 1, 1, 1, 0, 1, 0.3333333333333333, 1, 0.6666666666666666 },
						{ 1, 0.6666666666666666, 1, 1, 1, 1, 1, 1, 1, 0.3333333333333333, 1, 1 },
						{ 0.6666666666666666, 0, 1, 1, 1, 0, 0.3333333333333333, 0.3333333333333333, 1, 0.3333333333333333, 1, 1 },
						{ 0.3333333333333333, 0.3333333333333333, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 0.6666666666666666, 0.3333333333333333, 1, 1, 1, 1, 1, 0.3333333333333333, 0.6666666666666666, 1, 1,
								0.3333333333333333 },
						{ 1, 0.6666666666666666, 1, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 1, 0.3333333333333333,
								0.6666666666666666, 0.3333333333333333, 0.3333333333333333 },
						{ 0.6666666666666666, 0.3333333333333333, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 1, 1, 1, 1, 1, 1, 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 0.3333333333333333 },
						{ 0.3333333333333333, 0.6666666666666666, 1, 0.6666666666666666, 1, 0.6666666666666666, 0.6666666666666666, 1, 1, 1,
								1, 1 },
						{ 1, 0.3333333333333333, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 0, 0.3333333333333333, 1, 0.3333333333333333, 1, 1, 0.6666666666666666, 0.6666666666666666, 0.3333333333333333,
								0.6666666666666666, 0.6666666666666666, 0.3333333333333333 },
						{ 0.6666666666666666, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
						{ 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 1, 1,
								0.6666666666666666 },
						{ 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 },
						{ 0, 0, 1, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 1, 1, 1, 0.6666666666666666, 1, 1 }
				});

		maker.addCell(1, 2,
				new double[][] { { 0.6666666666666666, 0, 0.6666666666666666, 0, 0.3333333333333333, 0.6666666666666666, 0, 0, 0, 0, 0, 0 },
						{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0.3333333333333333, 0, 0 }, { 1, 0.6666666666666666, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
						{ 1, 1, 1, 1, 1, 1, 0.6666666666666666, 0, 0.3333333333333333, 0, 0.6666666666666666, 0.3333333333333333 },
						{ 0, 0.6666666666666666, 1, 1, 1, 1, 0, 0.3333333333333333, 0, 0, 0, 0 },
						{ 0.3333333333333333, 0.6666666666666666, 1, 0.6666666666666666, 1, 1, 0.3333333333333333, 0, 1, 0,
								0.6666666666666666, 0 },
						{ 0, 0.6666666666666666, 0.6666666666666666, 1, 0, 0.6666666666666666, 0, 0, 0, 0, 0, 0 },
						{ 0.6666666666666666, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
						{ 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0, 0, 0, 0, 0.6666666666666666, 0.3333333333333333,
								0.3333333333333333, 0.6666666666666666, 0.3333333333333333 },
						{ 0.6666666666666666, 0.3333333333333333, 1, 1, 1, 1, 0, 1, 0, 1, 0, 1 },
						{ 1, 1, 1, 1, 1, 1, 0.3333333333333333, 0, 0, 0, 0, 0 },
						{ 0.3333333333333333, 1, 0.3333333333333333, 0.3333333333333333, 0, 1, 0, 0, 0.3333333333333333, 0,
								0.3333333333333333, 0 },
						{ 0.3333333333333333, 0, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 0.3333333333333333,
								0.6666666666666666, 1, 0.3333333333333333, 0, 0.3333333333333333 },
						{ 0, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0, 0.3333333333333333, 0, 0, 0, 0, 0, 0 },
						{ 0.6666666666666666, 0.3333333333333333, 1, 0.6666666666666666, 1, 1, 0.6666666666666666, 0.6666666666666666, 1, 1,
								1, 0.6666666666666666 },
						{ 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.3333333333333333, 1, 0.6666666666666666, 0, 0,
								0.3333333333333333, 0, 0.6666666666666666, 0.3333333333333333 },
						{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
						{ 0.3333333333333333, 0, 0.6666666666666666, 0.3333333333333333, 0, 0.3333333333333333, 0, 0, 0, 0, 0, 0 },
						{ 0, 0.3333333333333333, 0.3333333333333333, 0, 1, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333,
								0.6666666666666666, 0.3333333333333333, 1, 0.6666666666666666 },
						{ 0, 0.6666666666666666, 0.3333333333333333, 0.6666666666666666, 0, 0.6666666666666666, 0, 0, 0.3333333333333333,
								0.3333333333333333, 0, 0 },
						{ 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 1,
								0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 1 },
						{ 0.6666666666666666, 0.6666666666666666, 0, 0.6666666666666666, 0.3333333333333333, 0, 0, 0, 0, 0, 0, 0 },
						{ 0.3333333333333333, 1, 1, 1, 0, 1, 0.3333333333333333, 1, 0, 1, 0, 1 },
						{ 0, 0, 0, 0.3333333333333333, 0.3333333333333333, 1, 0.3333333333333333, 0, 0.6666666666666666, 0.3333333333333333,
								0.6666666666666666, 0.6666666666666666 },
						{ 0.3333333333333333, 0, 1, 0.3333333333333333, 0.6666666666666666, 1, 0.3333333333333333, 0.6666666666666666, 0,
								0.3333333333333333, 0, 0 },
						{ 0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0, 0, 0.3333333333333333, 0, 0,
								0, 0 },
						{ 0.3333333333333333, 0, 1, 1, 1, 1, 0, 0.3333333333333333, 0, 0, 0, 0 },
						{ 0, 0.6666666666666666, 0, 0.3333333333333333, 0, 0.3333333333333333, 0, 0.3333333333333333, 0, 0.3333333333333333,
								0, 0.3333333333333333 },
						{ 0, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 1, 0, 1, 0, 0.6666666666666666,
								0, 0.6666666666666666 },
						{ 0.3333333333333333, 0.3333333333333333, 1, 1, 1, 0.6666666666666666, 0, 0, 0, 0, 0, 0 },
						{ 0.6666666666666666, 1, 0.6666666666666666, 1, 0.3333333333333333, 1, 0, 0, 0, 0, 0, 0 },
						{ 1, 1, 1, 1, 1, 1, 0.6666666666666666, 0, 0.6666666666666666, 0.3333333333333333, 0.6666666666666666,
								0.3333333333333333 },
						{ 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 0.6666666666666666, 1, 0.6666666666666666, 0,
								0.3333333333333333, 0, 0.6666666666666666, 0 },
						{ 0.3333333333333333, 0, 0.6666666666666666, 1, 1, 1, 1, 0.6666666666666666, 1, 1, 0, 1 },
						{ 0, 0.3333333333333333, 1, 0.6666666666666666, 1, 1, 0, 0, 0, 0, 0, 0 },
						{ 0.6666666666666666, 0.3333333333333333, 1, 0.6666666666666666, 1, 0.6666666666666666, 0.6666666666666666,
								0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666 },
						{ 0, 0, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 0.3333333333333333, 1, 0.3333333333333333,
								0.3333333333333333, 0.3333333333333333, 0.6666666666666666 },
						{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 }, { 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0.3333333333333333 },
						{ 0.6666666666666666, 0.3333333333333333, 1, 0.6666666666666666, 1, 0.6666666666666666, 0, 0, 0, 0, 0, 0 },
						{ 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333,
								0.6666666666666666, 0, 0, 0, 0, 0, 0 },
						{ 0, 0.6666666666666666, 0.3333333333333333, 0, 1, 1, 0.6666666666666666, 1, 0.6666666666666666, 0.6666666666666666,
								1, 1 },
						{ 0.3333333333333333, 0.3333333333333333, 1, 0, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0, 0, 0,
								0, 0 },
						{ 0.3333333333333333, 0.6666666666666666, 1, 0.6666666666666666, 1, 1, 0, 0, 0, 0, 0, 0 },
						{ 0.3333333333333333, 0.6666666666666666, 0, 0.3333333333333333, 0.3333333333333333, 1, 0.3333333333333333, 1, 1, 0,
								0, 0.3333333333333333 },
						{ 0, 1, 0, 1, 0, 1, 0.3333333333333333, 0, 0, 0, 0, 0 },
						{ 0.3333333333333333, 0, 1, 0.6666666666666666, 1, 0, 0, 0, 0, 0, 0, 0 }
				});

		maker.addCell(1, 3,
				new double[][] { { 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 0.6666666666666666 },
						{ 0.3333333333333333, 0.3333333333333333, 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 0, 1, 0, 1, 0 },
						{ 0.3333333333333333, 0, 1, 0, 1, 0, 1, 1, 1, 1, 1, 1 },
						{ 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 0.6666666666666666,
								0.6666666666666666, 1, 0.6666666666666666, 0, 0.6666666666666666, 1 },
						{ 1, 0.6666666666666666, 1, 1, 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 1 },
						{ 1, 0, 1, 0.3333333333333333, 1, 0, 1, 1, 1, 1, 1, 1 },
						{ 1, 0.6666666666666666, 1, 0.3333333333333333, 1, 0, 1, 1, 1, 1, 1, 1 },
						{ 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 0, 1, 1, 1, 0.6666666666666666, 1, 1 },
						{ 0, 0.6666666666666666, 1, 1, 1, 0.3333333333333333, 1, 1, 0.6666666666666666, 1, 1, 1 },
						{ 1, 0, 1, 0, 1, 0.3333333333333333, 1, 1, 1, 0.6666666666666666, 1, 0.3333333333333333 },
						{ 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0, 1, 0, 1, 1,
								1,
								0.6666666666666666 },
						{ 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 1, 0.6666666666666666,
								0.6666666666666666,
								1, 1, 1, 1, 1 },
						{ 0, 0, 1, 0.6666666666666666, 1, 0, 1, 0.3333333333333333, 1, 0.6666666666666666, 0.6666666666666666,
								0.6666666666666666 },
						{ 1, 0.3333333333333333, 0.6666666666666666, 1, 1, 1, 0.6666666666666666, 1, 1, 1, 1, 1 },
						{ 1, 0, 1, 0, 1, 0.3333333333333333, 1, 1, 1, 1, 1, 1 },
						{ 1, 0, 1, 0.6666666666666666, 1, 0.6666666666666666, 1, 0, 1, 0.6666666666666666, 1, 0.3333333333333333 },
						{ 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 0, 0, 1, 0, 1, 0.3333333333333333, 1 },
						{ 1, 0, 1, 0.3333333333333333, 1, 0, 1, 1, 1, 1, 1, 1 }, { 1, 1, 1, 1, 1, 1, 1, 0.6666666666666666, 1, 1, 1, 1 },
						{ 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 1, 1, 1, 1, 1 },
						{ 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 1, 1, 0.6666666666666666, 1, 0.6666666666666666, 1,
								0.3333333333333333 },
						{ 0, 0, 1, 0.6666666666666666, 1, 1, 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 1 },
						{ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
						{ 0.3333333333333333, 0.6666666666666666, 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 0.6666666666666666, 1,
								0.6666666666666666, 1, 0.6666666666666666 },
						{ 1, 0.6666666666666666, 1, 0.6666666666666666, 1, 1, 1, 1, 1, 0.3333333333333333, 1, 1 },
						{ 0, 0.6666666666666666, 0.6666666666666666, 1, 1, 1, 1, 1, 1, 0.6666666666666666, 1, 1 },
						{ 1, 0, 1, 0.3333333333333333, 1, 0, 0.6666666666666666, 0.6666666666666666, 1, 0.3333333333333333, 1, 1 },
						{ 0, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 1, 1, 1, 0.6666666666666666,
								1, 1 },
						{ 1, 0.3333333333333333, 1, 1, 1, 1, 1, 0.6666666666666666, 1, 0.6666666666666666, 1, 0.6666666666666666 },
						{ 0.6666666666666666, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1, 0.6666666666666666 },
						{ 0.3333333333333333, 0.3333333333333333, 1, 1, 1, 0, 1, 0.6666666666666666, 1, 0.6666666666666666, 1,
								0.6666666666666666 },
						{ 1, 0, 1, 0.6666666666666666, 1, 0, 1, 0, 1, 0.3333333333333333, 1, 0 },
						{ 0.3333333333333333, 0.6666666666666666, 1, 0.6666666666666666, 0.3333333333333333, 0, 0.3333333333333333, 0,
								0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 1 },
						{ 0.3333333333333333, 0.3333333333333333, 1, 1, 0.6666666666666666, 0.6666666666666666, 1, 0.3333333333333333, 1,
								0.3333333333333333, 1, 0.3333333333333333 },
						{ 0, 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 1, 0.3333333333333333, 0.3333333333333333,
								0.3333333333333333, 0.6666666666666666, 1, 0.3333333333333333, 1 },
						{ 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 0.6666666666666666, 1, 1,
								0.3333333333333333, 1, 0, 1, 0.3333333333333333 },
						{ 1, 1, 1, 1, 1, 0.6666666666666666, 1, 1, 1, 1, 1, 1 },
						{ 0, 0.3333333333333333, 1, 0, 1, 0.3333333333333333, 1, 0.3333333333333333, 1, 0.3333333333333333,
								0.6666666666666666,
								0.3333333333333333 },
						{ 1, 0, 1, 0, 1, 0.3333333333333333, 1, 1, 1, 1, 1, 1 },
						{ 1, 1, 1, 1, 1, 1, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 1, 0 },
						{ 1, 1, 1, 0, 1, 0.3333333333333333, 1, 1, 1, 1, 1, 1 },
						{ 0, 0, 1, 1, 1, 0.6666666666666666, 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 0.6666666666666666 },
						{ 0, 0, 1, 0.3333333333333333, 1, 0.6666666666666666, 1, 0.3333333333333333, 1, 0, 1, 0.3333333333333333 },
						{ 1, 0.3333333333333333, 1, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 1, 1, 0.6666666666666666,
								0.3333333333333333, 0.6666666666666666, 0.3333333333333333 },
						{ 0.3333333333333333, 0, 0.6666666666666666, 0.6666666666666666, 1, 1, 0.6666666666666666, 0.6666666666666666, 1, 1,
								1,
								0.3333333333333333 }
				});
		maker.addCell(1, 4,
				new double[][] { { 0, 0.6666666666666666, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0 },
						{ 0, 0.3333333333333333, 0, 0.3333333333333333, 0.6666666666666666, 1, 0, 0.3333333333333333, 0.3333333333333333,
								0.3333333333333333, 0, 0.3333333333333333 },
						{ 0, 0, 0.6666666666666666, 0.3333333333333333, 0.6666666666666666, 1, 0, 0, 0, 0, 0, 0 },
						{ 0.3333333333333333, 1, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666,
								0.6666666666666666,
								1, 0, 0.3333333333333333, 0.3333333333333333, 1 },
						{ 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 1, 1, 0, 0.3333333333333333, 0, 0, 0, 0 },
						{ 0, 0.3333333333333333, 0, 0.6666666666666666, 0.3333333333333333, 0.6666666666666666, 0, 0, 0, 0, 0, 0 },
						{ 0, 0.3333333333333333, 0, 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 0, 0.3333333333333333, 0,
								0.3333333333333333, 0, 0.3333333333333333 },
						{ 0, 1, 0, 1, 0.6666666666666666, 1, 0, 0, 0, 0, 0, 0 },
						{ 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 1, 0.6666666666666666, 1, 0, 0, 0, 0.3333333333333333,
								0, 0 },
						{ 0, 0.3333333333333333, 0, 1, 0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333, 1, 0.3333333333333333,
								1,
								0.3333333333333333 },
						{ 0.3333333333333333, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0, 1, 0.3333333333333333, 0,
								0.3333333333333333, 0, 0, 0 },
						{ 0.3333333333333333, 0, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 0, 0, 0, 0, 0, 0 },
						{ 0, 1, 0, 0.6666666666666666, 1, 1, 0.3333333333333333, 1, 0.6666666666666666, 0.6666666666666666,
								0.3333333333333333, 1 },
						{ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0.3333333333333333, 1, 0, 1, 0, 0.6666666666666666, 0, 0, 0, 0, 0, 0 },
						{ 1, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 1, 1, 0.6666666666666666, 1, 0.6666666666666666, 0,
								1,
								0.6666666666666666 },
						{ 1, 0, 1, 0, 0.6666666666666666, 0, 1, 0, 1, 0.3333333333333333, 1, 0 },
						{ 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0 }, { 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0.3333333333333333, 0 },
						{ 0.6666666666666666, 1, 0.3333333333333333, 1, 0, 1, 0, 0, 0, 0, 0, 0 },
						{ 1, 1, 1, 0.6666666666666666, 1, 0.6666666666666666, 1, 0, 1, 0, 1, 0 },
						{ 0.3333333333333333, 0, 1, 1, 0.6666666666666666, 0.3333333333333333, 1, 0, 0.6666666666666666, 0.3333333333333333,
								0, 0 },
						{ 0, 0, 0.3333333333333333, 0, 0, 0, 0, 0, 0.3333333333333333, 0, 0, 0 },
						{ 0, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 0, 0.3333333333333333, 0, 0,
								0, 0 },
						{ 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
						{ 0, 0.3333333333333333, 1, 1, 1, 1, 0, 0.3333333333333333, 0, 0, 0, 0.6666666666666666 },
						{ 0, 0, 1, 0, 0.3333333333333333, 0.3333333333333333, 0, 0, 0, 0, 0.3333333333333333, 0 },
						{ 0, 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 1, 1, 0, 0, 0, 0, 0, 0 },
						{ 0.3333333333333333, 1, 1, 0.6666666666666666, 1, 0.6666666666666666, 0.3333333333333333, 0, 0.6666666666666666, 0,
								1, 0 },
						{ 0.3333333333333333, 1, 1, 1, 1, 1, 0, 0, 0, 0.3333333333333333, 0.3333333333333333, 0.3333333333333333 },
						{ 0, 1, 1, 0.6666666666666666, 0.3333333333333333, 0.6666666666666666, 0, 0, 0, 0, 0, 0 },
						{ 0, 0, 0, 0.6666666666666666, 0, 0, 0.3333333333333333, 0, 0, 0.6666666666666666, 0, 1 },
						{ 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0, 0.3333333333333333,
								0.3333333333333333,
								0, 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666 },
						{ 0.3333333333333333, 0.3333333333333333, 1, 1, 0.6666666666666666, 1, 0.3333333333333333, 0.6666666666666666,
								0.6666666666666666, 1, 0.6666666666666666, 0.6666666666666666 },
						{ 0.6666666666666666, 0, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.3333333333333333,
								0.6666666666666666,
								0.3333333333333333, 0.6666666666666666, 1, 0.3333333333333333, 0.6666666666666666 },
						{ 1, 0.3333333333333333, 0.3333333333333333, 0, 0.6666666666666666, 1, 0.3333333333333333, 1, 0, 1, 0, 1 },
						{ 1, 1, 1, 1, 0.6666666666666666, 1, 0, 0, 0, 0, 0, 0 },
						{ 0, 1, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 1, 0.3333333333333333, 1, 0.3333333333333333, 0,
								0.3333333333333333, 0.6666666666666666 },
						{ 0.3333333333333333, 0, 0, 0, 0.3333333333333333, 0, 0, 0, 0, 0, 0, 0.3333333333333333 },
						{ 1, 1, 1, 1, 1, 1, 0.6666666666666666, 0.6666666666666666, 0.6666666666666666, 0.3333333333333333, 1,
								0.6666666666666666 },
						{ 0.6666666666666666, 1, 0.3333333333333333, 0.6666666666666666, 0.3333333333333333, 0.6666666666666666, 0, 0, 0, 0,
								0, 0 },
						{ 0.3333333333333333, 0.3333333333333333, 0, 1, 1, 1, 0.3333333333333333, 0, 1, 1, 1, 1 },
						{ 0.3333333333333333, 0.3333333333333333, 1, 0.6666666666666666, 1, 0.3333333333333333, 0, 0, 0, 0.3333333333333333,
								0.3333333333333333, 0.3333333333333333 },
						{ 0.3333333333333333, 0.6666666666666666, 0.6666666666666666, 1, 1, 0.6666666666666666, 0.6666666666666666,
								0.6666666666666666, 0.6666666666666666, 0.3333333333333333, 0.3333333333333333, 0.6666666666666666 },
						{ 0, 0, 0.3333333333333333, 0.6666666666666666, 1, 1, 0.3333333333333333, 0, 0.3333333333333333, 0.3333333333333333,
								0,
								0.6666666666666666 }
				});

		assertEquals(184, maker.getGm().getData().size());
		assertEquals(nVar, maker.getGm().getNDepVar().length);

		// maker.setModel(new double[][] { { 1, 0, 1 }, { 1, 0, 0 }, { 0, 1, 1
		// }, { 0, 1, 0 } });
		DoubleMatrix2D model = new DenseDoubleMatrix2D(new double[][] { { -1 }, { 1 }, { 1 }, { 1 } });
		maker.setShrink(-1);

		GeneralModel gm = maker.getGm();
		CombinedStatsSTA[] stats = gm.calcStats();
		int n = stats.length;
		double[][] means = new double[n][];
		DoubleMatrix2D[] weights = new DoubleMatrix2D[n];

		for (int i = 0; i < n; i++) {
			means[i] = stats[i].getMeans().toArray();
			weights[i] = stats[i].getWeights();
		}

		CMRxProblem p = new CMRxProblem(means, weights, null, model);
		CMRxSolver solver = new CMRxSolver();
		CMRSolution sol = solver.solve(p);
		assertEquals(2.208650316941036e+02, sol.getFStar(), 1e-4);
	}

	@Test
	public void generalModelFitsTest() {
		GeneralModel gm = new GeneralModel();

		Random rand = new Random(2345235);
		for (int i = 0; i < 1000; i++) {
			int between = rand.nextInt(2);
			int n = between == 0 ? 3 : 4;

			double[] cond = new double[n];
			for (int c = 0; c < n; c++)
				cond[c] = rand.nextDouble() + c * rand.nextGaussian();

			gm.addData(i, between, rand.nextInt(4), cond);
		}

		DoubleMatrix2D model = new DenseDoubleMatrix2D(gm.getNDepVar().length, 1);
		model.assign(1);

		Fits fit = new CMRxGMFits(10, gm, model, null, -1);

		// System.out.println(gm.toMATLABString());

		// System.out.println(fit.getP());
		// System.out.println(fit.getDataFit());
		// System.out.println(Arrays.toString(fit.getFits()));
	}

	private DoubleMatrix2D[] getCovSK1() {
		DoubleMatrix2D[] cov = new DoubleMatrix2D[4];
		cov[0] = DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(new double[] { 0.16, 0.16, 0.25, 0.25, 404.01,
				0.16, 60.84, 453.69, 1681, 1197.16, 1640.25, 2590.81, 1806.25, 2500, 1102.24, 2034.01 }));
		cov[1] = DoubleFactory2D.dense
				.diagonal(new DenseDoubleMatrix1D(new double[] { 2381.44, 2332.89, 1672.81, 2490.01, 1806.25, 2218.41,
						2227.84, 2016.01, 1664.64, 2294.41, 1211.04, 1239.04, 0.25, 1128.96, 992.25, 1600 }));
		cov[2] = DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(new double[] { 94.09, 0.64, 17.64, 123.21,
				942.49, 1444, 219.04, 954.81, 37.21, 0.25, 123.21, 823.69, 1122.25, 492.84, 225, 515.29 }));
		cov[3] = DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(new double[] { 852.64, 1459.24, 750.76, 605.16,
				54.76, 0.49, 289, 234.09, 349.69, 345.96, 756.25, 610.09, 18.49, 33.64, 275.56, 605.16 }));
		return cov;
	}

	private int[] getNSK1() {
		return new int[] { 40, 40, 40, 40 };
	}

	// @Test
	public void testSKCom() {
		double[][] means = {
				{ 99.5, 95.15000000000001, 69.95, 70.45, 99.43333333333334, 95.69999999999999, 94, 77.33333333333333,
						64.63333333333333, 76.16666666666667 },
				{ 55.8, 67.175, 77.25, 87.15000000000001, 38.43333333333334, 42.06666666666666, 66.3, 45.33333333333334,
						59.46666666666666, 79.60000000000001 },
				{ 95.47499999999999, 63.375, 92.55000000000001, 73.375, 96.53333333333335, 74.26666666666667,
						73.09999999999999, 86.43333333333334, 67.43333333333332, 67.33333333333333 },
				{ 62.125, 88.925, 80.90000000000001, 87.84999999999999, 52, 54.83333333333334, 86.53333333333335,
						51.86666666666667, 63.76666666666667, 87.96666666666665 } };
		DoubleMatrix2D[] weights = {
				DoubleFactory2D.dense
						.diagonal(new DenseDoubleMatrix1D(new double[] { 48.78048780487805, 0.04353978447806683,
								0.005626496296358813, 0.005374538125629829, 50.92592592592592, 0.07395256279244877,
								0.05754944020089987, 0.01227832050434876, 0.009886094219870328, 0.01264911582680371 })),
				DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(
						new double[] { 0.004505950671105028, 0.004837630963740746, 0.006241096685509579,
								0.01074846968662837, 0.01085110118947798, 0.009817256237527621, 0.009642322432249537,
								0.009051680156413033, 0.01052057729276854, 0.01454060927796622 })),
				DoubleFactory2D.dense
						.diagonal(new DenseDoubleMatrix1D(new double[] { 0.1697937006537058, 0.01123488206182556,
								0.04063553984314682, 0.01698239774473758, 0.3390457403526077, 0.02929739519522719,
								0.02798982188295165, 0.04008571053744005, 0.03530597441279745, 0.02221593892636426 })),
				DoubleFactory2D.dense
						.diagonal(new DenseDoubleMatrix1D(new double[] { 0.01090572005016631, 0.06916346785627832,
								0.01939873617233837, 0.04287934823390684, 0.0240442414041837, 0.03115988419853945,
								0.05186232909005186, 0.02029804917294676, 0.04472708346886996, 0.1085690597919422 })) };
		DoubleMatrix2D[] cov = {
				DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(
						new double[] { 0.8200000000000001, 918.7000000000001, 7109.219999999999, 7442.5, 1.08, 743.72,
								955.7000000000001, 4479.440000000001, 5563.370000000001, 4348.13 })),
				DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(new double[] { 8877.15, 8268.51,
						6409.129999999999, 3721.46, 5068.61, 5602.380000000001, 5704.02, 6076.22, 5227.85, 3782.51 })),
				DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(new double[] { 235.58, 3560.34,
						984.3599999999999, 2355.38, 162.22, 1877.3, 1965, 1372.06, 1557.81, 2475.7 })),
				DoubleFactory2D.dense.diagonal(new DenseDoubleMatrix1D(new double[] { 3667.8, 578.34, 2061.99,
						932.8500000000001, 2287.45, 1765.09, 1060.5, 2709.62, 1229.68, 506.59 })) };

		int[] n = { 40, 40, 40, 40 };
		CMRxFitsProblem problem = new CMRxFitsProblem(means, weights, null, model4, n, cov);

		CMRxFits f = new CMRxFits(2, problem, -1, 0);
	}
}
